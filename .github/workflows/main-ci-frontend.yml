name: Frontend CI/CD Pipeline

permissions:
  contents: read
  checks: write
  actions: read
  security-events: write
  id-token: write

concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: true

on:
  # Trigger on all branches for push events (commits) - with comment filtering
  push:
    branches: ["*"]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
      - 'docs/**'
      - 'README*'

  # Trigger on pull requests to any branch
  pull_request:
    branches: ["*"]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
      - 'docs/**'
      - 'README*'

  # Trigger on merge events (when PR is merged)
  merge_group:

  # Manual trigger with options
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      skip_security_scan:
        description: 'Skip security scanning'
        required: false
        default: false
        type: boolean
      push_to_ecr:
        description: 'Push image to ECR'
        required: false
        default: false
        type: boolean
      deploy_to_environment:
        description: 'Deploy to target environment'
        required: false
        default: false
        type: boolean

jobs:
  # Comment filtering job
  check-changes:
    name: Check for Comment-Only Changes
    runs-on: ubuntu-latest
    outputs:
      has_code_changes: ${{ steps.changes.outputs.has_code_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for meaningful changes
        id: changes
        run: |
          echo "Checking for meaningful code changes..."
          
          # Get the list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Filter out comment-only files and documentation
          CODE_FILES=$(echo "$CHANGED_FILES" | grep -v -E '\.(md|txt)$|^\.gitignore$|^docs/|^README' || true)
          
          if [ -z "$CODE_FILES" ]; then
            echo "Only documentation/comment files changed - skipping CI"
            echo "has_code_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Code changes detected:"
            echo "$CODE_FILES"
            echo "has_code_changes=true" >> $GITHUB_OUTPUT
          fi

  # Security scanning stage
  security-scan:
    name: Security Analysis
    needs: check-changes
    if: needs.check-changes.outputs.has_code_changes == 'true' && !inputs.skip_security_scan
    uses: ./.github/workflows/security-scan.yml
    with:
      project_type: frontend
      trivy_severity: HIGH,CRITICAL
      skip_quality_gate: false
    secrets:
      SONARQUBE_URL: ${{ secrets.SONARQUBE_URL }}
      SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
      SONARQUBE_PROJECT_KEY: ${{ secrets.SONARQUBE_PROJECT_KEY }}
      TRIVY_SERVER_URL: ${{ secrets.TRIVY_SERVER_URL }}
      TRIVY_TOKEN: ${{ secrets.TRIVY_TOKEN }}

  # Build stage
  build:
    name: Build & Test
    needs: [check-changes, security-scan]
    if: always() && needs.check-changes.outputs.has_code_changes == 'true' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    uses: ./.github/workflows/build.yml
    with:
      project_type: frontend
      environment: ${{ inputs.environment || 'development' }}
      push_to_ecr: ${{ inputs.push_to_ecr || (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production') }}
      run_tests: ${{ !inputs.skip_tests }}
      docker_platforms: linux/amd64,linux/arm64
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TEAM_PRIVATE_KEY: ${{ secrets.TEAM_PRIVATE_KEY }}

  # Deployment stage (conditional)
  deploy:
    name: Deploy to Environment
    needs: [check-changes, build]
    if: always() && needs.check-changes.outputs.has_code_changes == 'true' && needs.build.result == 'success' && (inputs.deploy_to_environment || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production')
    uses: ./.github/workflows/deploy.yml
    with:
      project_type: frontend
      environment: ${{ inputs.environment || (github.ref == 'refs/heads/production' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'development' }}
      deploy_secrets: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production' || inputs.deploy_to_environment }}
      secrets_merge_strategy: merge
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SECRETS_MANAGER_SECRET_NAME: ${{ secrets.AWS_SECRETS_MANAGER_SECRET_NAME }}
      DEPLOYMENT_SECRETS: ${{ secrets.DEPLOYMENT_SECRETS }}

  # Pipeline summary
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [check-changes, security-scan, build, deploy]
    if: always()
    steps:
      - name: Generate pipeline summary
        run: |
          echo "# Frontend Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Pipeline trigger information
          echo "## Pipeline Information" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Stage results
          echo "## Stage Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Change Detection | ${{ needs.check-changes.result }} | ${{ needs.check-changes.outputs.has_code_changes == 'true' && 'Code changes detected' || 'Only comments/docs changed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | ${{ needs.security-scan.result == 'skipped' && 'Skipped' || needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build.result }} | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} | ${{ needs.deploy.result == 'skipped' && 'Not triggered' || needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.check-changes.outputs.has_code_changes }}" = "false" ]; then
            echo "## Overall Status: ✅ Skipped (No Code Changes)" >> $GITHUB_STEP_SUMMARY
            echo "Pipeline was skipped because only documentation or comment files were changed." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.result }}" = "success" ]; then
            echo "## Overall Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "All pipeline stages completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Overall Status: ❌ Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more pipeline stages failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Next steps
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "- Monitor deployment in target environment" >> $GITHUB_STEP_SUMMARY
            echo "- Run integration tests if available" >> $GITHUB_STEP_SUMMARY
            echo "- Verify application health" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.result }}" = "success" ]; then
            echo "- Image built successfully and ready for deployment" >> $GITHUB_STEP_SUMMARY
            echo "- Consider triggering deployment manually if needed" >> $GITHUB_STEP_SUMMARY
          fi