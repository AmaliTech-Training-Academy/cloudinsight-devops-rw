name: Main CI Pipeline

on:
  pull_request:
    branches: [main, development, staging]
  push:
    branches: [development, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      force_build:
        description: 'Force build even for non-functional changes'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  checks: write
  actions: read
  security-events: write
  id-token: write
  pull-requests: write
  issues: write

concurrency:
  group: main-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze Commits
    uses: ./.github/workflows/commit-analysis.yml
    
  lint-only:
    name: Lint Only
    if: needs.analyze.outputs.should_build == 'false' && !inputs.force_build
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Linting Only
        run: |
          echo "🔍 Running linting for non-functional changes..."
          
          # Simple linting for YAML files
          if command -v yamllint >/dev/null 2>&1; then
            find .github/workflows -name "*.yml" -exec yamllint {} \;
          else
            echo "yamllint not available, checking YAML syntax with Python"
            python3 -c "
            import yaml
            import sys
            from pathlib import Path
            
            errors = 0
            for yml_file in Path('.github/workflows').glob('*.yml'):
                try:
                    with open(yml_file) as f:
                        yaml.safe_load(f)
                    print(f'✅ {yml_file} - Valid YAML')
                except yaml.YAMLError as e:
                    print(f'❌ {yml_file} - Invalid YAML: {e}')
                    errors += 1
            
            sys.exit(errors)
            "
          fi
          
          echo "✅ Linting completed for documentation/style changes"
          
  security-scan:
    name: Security Scanning
    if: needs.analyze.outputs.should_build == 'true' || inputs.force_build
    needs: analyze
    uses: ./.github/workflows/security-scan.yml
    with:
      project_type: backend
      trivy_severity: HIGH,CRITICAL
      skip_quality_gate: false
    secrets: inherit
    
  build-and-push:
    name: Build and Push
    if: (needs.analyze.outputs.should_build == 'true' || inputs.force_build) && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    needs: [analyze, security-scan]
    strategy:
      matrix:
        project_type: [backend, frontend]
    uses: ./.github/workflows/build-push.yml
    with:
      version: ${{ needs.analyze.outputs.new_version || 'v0.1.0' }}
      environment: ${{ inputs.environment || (github.ref_name == 'staging' && 'staging' || 'development') }}
      project_type: ${{ matrix.project_type }}
    secrets: inherit
    
  secrets-management:
    name: Deploy Secrets
    if: (needs.analyze.outputs.should_build == 'true' || inputs.force_build) && needs.build-and-push.result == 'success'
    needs: [analyze, build-and-push]
    uses: ./.github/workflows/secrets-push.yml
    with:
      environment: ${{ inputs.environment || (github.ref_name == 'staging' && 'staging' || 'development') }}
    secrets: inherit
    
  tag-release:
    name: Create Release Tag
    if: github.event_name == 'push' && (needs.analyze.outputs.should_build == 'true' || inputs.force_build) && needs.build-and-push.result == 'success'
    needs: [analyze, build-and-push, secrets-management]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create Development Tag
        if: github.ref_name == 'development'
        run: |
          VERSION="${{ needs.analyze.outputs.new_version }}"
          echo "🏷️ Creating development tag: $VERSION"
          
          # Check if tag already exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "⚠️ Tag $VERSION already exists, skipping"
          else
            git tag "$VERSION"
            git push origin "$VERSION"
            echo "✅ Created development tag: $VERSION"
          fi
          
      - name: Create Staging RC Tag
        if: github.ref_name == 'staging'
        run: |
          echo "🏷️ Creating staging RC tag..."
          
          # Get the latest tag from development branch
          git fetch origin development:development 2>/dev/null || true
          
          # Get latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Create RC tag
          if [[ "$LATEST_TAG" == *"-rc" ]]; then
            RC_TAG="$LATEST_TAG"
          else
            RC_TAG="${LATEST_TAG}-rc"
          fi
          
          echo "RC tag: $RC_TAG"
          
          # Check if tag already exists
          if git rev-parse "$RC_TAG" >/dev/null 2>&1; then
            echo "⚠️ Tag $RC_TAG already exists, skipping"
          else
            git tag "$RC_TAG"
            git push origin "$RC_TAG"
            echo "✅ Created staging RC tag: $RC_TAG"
          fi
          
  error-reporting:
    name: Error Reporting
    if: failure() && github.event_name == 'pull_request'
    needs: [analyze, security-scan, build-and-push, secrets-management]
    runs-on: ubuntu-latest
    steps:
      - name: Report Errors to PR
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log('Starting error reporting...');
              
              const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              });
              
              const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              });
              
              let errorMessage = "## 🚨 CI Pipeline Failed\n\n";
              errorMessage += `**Workflow:** ${workflowRun.name}\n`;
              errorMessage += `**Branch:** ${context.ref.replace('refs/heads/', '')}\n`;
              errorMessage += `**Commit:** ${context.sha.substring(0, 7)}\n`;
              errorMessage += `**Triggered by:** ${context.actor}\n\n`;
              
              let failedJobs = jobs.jobs.filter(job => job.conclusion === 'failure');
              
              if (failedJobs.length > 0) {
                errorMessage += "### ❌ Failed Jobs\n\n";
                
                for (const job of failedJobs) {
                  errorMessage += `#### ${job.name}\n`;
                  errorMessage += `- **Status:** ${job.conclusion}\n`;
                  
                  if (job.started_at && job.completed_at) {
                    const duration = Math.round((new Date(job.completed_at) - new Date(job.started_at)) / 1000);
                    errorMessage += `- **Duration:** ${duration}s\n`;
                  }
                  
                  errorMessage += `- **Job URL:** [View Details](${job.html_url})\n\n`;
                  
                  // Try to get job logs for common error patterns
                  try {
                    const { data: logs } = await github.rest.actions.downloadJobLogsForWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      job_id: job.id
                    });
                    
                    // Extract error lines
                    if (typeof logs === 'string') {
                      const logLines = logs.split('\n');
                      const errorLines = logLines.filter(line => 
                        line.toLowerCase().includes('error') || 
                        line.toLowerCase().includes('failed') ||
                        line.toLowerCase().includes('fatal')
                      ).slice(-5); // Last 5 error lines
                      
                      if (errorLines.length > 0) {
                        errorMessage += "**Recent Errors:**\n";
                        errorMessage += "```\n";
                        errorMessage += errorLines.join('\n');
                        errorMessage += "\n```\n\n";
                      }
                    }
                  } catch (logError) {
                    console.log(`Could not retrieve logs for job ${job.name}:`, logError.message);
                    errorMessage += `- **Note:** Could not retrieve detailed logs\n\n`;
                  }
                }
              }
              
              errorMessage += "### 🔧 Troubleshooting\n";
              errorMessage += "1. Check the failed job logs using the links above\n";
              errorMessage += "2. Verify all required secrets are configured\n";
              errorMessage += "3. Ensure your commits follow conventional commit format\n";
              errorMessage += "4. Check if there are any syntax errors in your code\n\n";
              
              errorMessage += `[View Full Workflow Run](${workflowRun.html_url})`;
              
              // Post comment to PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: errorMessage
              });
              
              console.log('Error report posted successfully');
              
            } catch (error) {
              console.error('Error posting failure report:', error);
              // Don't fail the job if error reporting fails
            }
            
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [analyze, lint-only, security-scan, build-and-push, secrets-management, tag-release]
    if: always()
    steps:
      - name: Generate Pipeline Summary
        run: |
          echo "# 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Pipeline Information
          echo "## 📋 Pipeline Information" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Semantic Versioning Results
          echo "## 🏷️ Semantic Versioning" >> $GITHUB_STEP_SUMMARY
          echo "**Should Build:** ${{ needs.analyze.outputs.should_build }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version Bump:** ${{ needs.analyze.outputs.version_bump }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.analyze.outputs.new_version }}" != "" ]; then
            echo "**New Version:** ${{ needs.analyze.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Stage Results
          echo "## 📊 Stage Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Commit Analysis | ${{ needs.analyze.result }} | ${{ needs.analyze.outputs.should_build == 'true' && 'Functional changes detected' || 'Only docs/style changes' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint-only.result }}" != "skipped" ]; then
            echo "| Lint Only | ${{ needs.lint-only.result }} | Documentation changes only |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" != "skipped" ]; then
            echo "| Security Scan | ${{ needs.security-scan.result }} | SonarQube + Trivy analysis |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-and-push.result }}" != "skipped" ]; then
            echo "| Build & Push | ${{ needs.build-and-push.result }} | Multi-platform Docker builds |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.secrets-management.result }}" != "skipped" ]; then
            echo "| Secrets Management | ${{ needs.secrets-management.result }} | AWS Secrets Manager |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.tag-release.result }}" != "skipped" ]; then
            echo "| Release Tagging | ${{ needs.tag-release.result }} | Git tag creation |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall Status
          if [ "${{ needs.analyze.outputs.should_build }}" = "false" ] && [ "${{ inputs.force_build }}" != "true" ]; then
            echo "## ✅ Pipeline Status: Optimized Skip" >> $GITHUB_STEP_SUMMARY
            echo "Pipeline was optimized to skip expensive builds because only documentation, style, test, or chore changes were detected." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "## ✅ Pipeline Status: Success" >> $GITHUB_STEP_SUMMARY
            echo "All pipeline stages completed successfully!" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.analyze.outputs.new_version }}" != "" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🎉 **New version created:** ${{ needs.analyze.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ❌ Pipeline Status: Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more pipeline stages failed. Check the logs and error reports above." >> $GITHUB_STEP_SUMMARY
          fi